You are given two integers n and k. Find the greatest integer x, such that, x^k <= n.

Input Format
First line contains number of test cases, T. Next T lines contains integers, n and k.

Constraints
1<=T<=10
1<=N<=10^15
1<=K<=10^4

Output Format
Output the integer x

Sample Input
2
10000 1
1000000000000000 10

Sample Output
10000
31

Explanation
For the first test case, for x=10000, 10000^1=10000=n

//********************************** S O L U T I O N **************************************//

import java.util.*;
public class Main {
    static float power(long x, long k){
        float pow=1;
        for(int i=1; i<=k; i++){
            pow *= x;
        }
        return pow;
    }
    static long kthRoot(long n, long k){
        long start = 0;
        long end = n;
        long ans = 0;
        while(start<=end){
            long mid = start+(end-start)/2;

            if(power(mid,k) <= n){
                ans = mid;
                start = mid + 1;
            }
            else{
                end = mid - 1;
            }
        }
        return ans;
    }
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while(t>0){
            long n = sc.nextLong();
            long k = sc.nextLong();

            System.out.println(kthRoot(n, k));
            t--;
        }
    }
}
