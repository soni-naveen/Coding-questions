A Boston number is a composite number, the sum of whose digits is the sum of the digits of its prime factors obtained as a result of prime factorization (excluding 1 ). The first few such numbers are 4,22 ,27 ,58 ,85 ,94 and 121 . For example, 378 = 2 × 3 × 3 × 3 × 7 is a Boston number since 3 + 7 + 8 = 2 + 3 + 3 + 3 + 7. Write a program to check whether a given integer is a Boston number.

Input Format
There will be only one line of input:N , the number which needs to be checked.

Constraints
1 < N < 2,147,483,647 (max value of an integer of the size of 4 bytes)

Output Format
1 if the number is a Boston number. 0 if the number is a not Boston number.

Sample Input
378

Sample Output
1

//****************************************** S O L U T I O N **************************************************//

import java.util.*;
public class Main {
//Sum of Digits
    static int sumDigits(int n) {
        int sumD = 0;
        while (n>0) {
            int rem = n%10;
            sumD += rem;
            n/=10;
        }
        return sumD;
    }
//Sum of Prime
    static int sumPrime(int n) {
        int sumP = 0;
        int i=2;
        while(i<=n){    // or while(n>1)
            if(n%i==0){
                sumP += sumDigits(i);
                n/=i;
            }
            else{
                i++;
            }
        }
        return sumP;
    }
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        int x = sumDigits(n);
        int y = sumPrime(n);
       
        if(x==y){
            System.out.println(1);
        }
        else{
            System.out.println(0);
        }
    }
}



// import java.util.*;
// public class Main {
// //Sum of Digits
//     static int sumDigits(int n) {
//         int sumD = 0;
//         while (n>0) {
//             int rem = n%10;
//             sumD += rem;
//             n/=10;
//         }
//         return sumD;
//     }
// //Sum of Prime
//     static int sumPrime(int n) {
//         int sumP = 0;
//         int i=2;
//         while(i<=n){
//             if(n%i==0){
//                 if(i>9){
//                     int j=i;
//                     while(j>0){
//                         sumP += j%10;
//                         j/=10;
//                     }
//                 }
//                 else{
//                     sumP += i;
//                 }
//                 n/=i;
//             }
//             else{
//                 i++;
//             }
//         }
//         return sumP;
//     }
//     public static void main(String args[]) {
//         Scanner sc = new Scanner(System.in);
//         int n = sc.nextInt();

//         int x = sumDigits(n);
//         int y = sumPrime(n);

//         if(x==y){
//             System.out.println(1);
//         }
//         else{
//             System.out.println(0);
//         }
//     }
// }
