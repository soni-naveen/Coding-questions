Jeetu Bhaiya has given you a string and you to print the size of the longest possible substring that has exactly k unique characters.
If there is no possible substring then print -1.

Input Format
The first line of input contains an integer T denoting the no of test cases. Each test case contains two lines. The first line of each test case contains a string s and the next line contains an integer k.

Constraints
1<=T<=100
1<=k<=10

Output Format
For each test case in a new line print the required output.

Sample Input
2
aaaa
1
qmb
6

Sample Output
4
-1

// ************************************* S O L U T I O N ******************************************//

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
	
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t>0) {
			String str = sc.next();
			int k = sc.nextInt();
            System.out.println(kUniques(str, k));
            t--;
		}
	}
	public static int kUniques(String str, int k){
		
		int freq [] = new int [26];
		int start = 0;
		int noOfUniqueCharacters = 0;
		int maxLength = Integer.MIN_VALUE;
        
		for (int i=0; i<str.length(); i++){
			int idx = str.charAt(i)-'a';
			if(freq[idx]==0){
				noOfUniqueCharacters++;
			}
			freq[idx]++;
			while(noOfUniqueCharacters>k){
				int new_idx = str.charAt(start)-'a';
				freq[new_idx]--;
				if(freq[new_idx]==0){
					noOfUniqueCharacters--;
				}
				start++;
			}
			maxLength = Math.max(maxLength, i-start+1);
		}
		if(maxLength<k){
			return -1;
		}
		return maxLength;
	}
}
