public class mergeSort {
    public static void main(String[] args) {
        int arr[] = {1,3,42,2,5,7,4};
        int res[] = sol(arr,0,arr.length-1);

        for(int val:res){
            System.out.print(val+" ");
        }
    }
    public static int[] sol(int arr[], int lo, int hi){
        if(lo==hi){
            int res[] = new int[1];
            res[0] = arr[lo];
            return res;
        }
        int mid = (lo+hi)/2;
        int la[] = sol(arr, lo, mid);
        int ra[] = sol(arr, mid+1, hi);
        int res[] = merge(la,ra);
        return res;
    }
    public static int[] merge(int la[], int ra[]){
        int res[] = new int[la.length + ra.length];
        int idx=0;

        int i=0;
        int j=0;
        while(i<la.length && j<ra.length){
            if(la[i] < ra[j]){
                res[idx++] = la[i++];
            }
            else{
                res[idx++] = ra[j++];
            }
        }
        while(i<la.length){
            res[idx++] = la[i++];
        }
        while(j<ra.length){
            res[idx++] = ra[j++];
        }
        return res;
    }
}


========================= OR ============================


public class mergeSortAlgo {
  public static void printArr(int arr[]){
      for (int i = 0; i < arr.length; i++) {
        System.out.print(arr[i] + " ");
      }
      System.out.println();
  }
  public static void mergeSort(int arr[], int si, int ei){
    if(si>=ei){
      return;
    }
    int mid=si+(ei-si)/2;
    mergeSort(arr, si, mid); //left part
    mergeSort(arr, mid+1, ei); //right part 
    merge(arr, si, mid, ei); //merge after sorting
  }
  public static void merge(int arr[], int si, int mid, int ei){
    int temp[] = new int[ei-si+1]; //6-0+1 
    int i = si;       //iterator for left part 
    int j = mid+1;    //iterator for right part
    int k = 0;        //iterator for temp arr 

    while(i<=mid && j<=ei){
      if(arr[i] < arr[j]){ 
        temp[k++] = arr[i++];
      } 
      else{
        temp[k++] = arr[j++];
      }
    }
    //left part
    while(i <= mid){
      temp[k++] = arr[i++];
    }
    //right part
    while (j <= ei) {
      temp[k++] = arr[j++];
    }
    //copy temp to original arr
    for(k=0, i=si; k<temp.length; k++,i++){
      arr[i] = temp[k];
    }
  }
  public static void main(String[] args) {
    int arr[] = {6,3,9,5,-2,8};
    mergeSort(arr, 0, arr.length-1);
    printArr(arr);
  }
}
